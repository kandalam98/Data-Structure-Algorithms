class Solution {
    public ListNode sortList(ListNode head) 
    {
        if(head == null || head.next == null)return head;
        ListNode middle=getMiddle(head);
        ListNode left=sortList(head);
        ListNode right=sortList(middle);
        return merge(left,right);     
        
    }
    ListNode merge(ListNode left,ListNode right)
    {
        ListNode temp=new ListNode();
        ListNode curr=temp;
        while(left!=null && right!=null)
        {
            if(left.val<right.val)
            {
                curr.next=left;
                curr=curr.next;
                left=left.next;
            }
            else
            {
                curr.next=right;
                curr=curr.next;
                right=right.next;   
            }
        }
        curr.next=(left!= null) ? left : right;
        return temp.next;
    }
    public ListNode getMiddle(ListNode h) //if the linkedlist contains even elements check if(fast.next.next==head)fast=fast.next it moves to tail element. incase if we want to
                                               use for another problems (only in circular LL)
    {
        ListNode midprev=null;
        ListNode fast=h;
        while(fast!=null && fast.next!=null) //if we are finding Middle ele in circular LL . instead 0f null write head
        {
            midprev=(midprev==null) ? h : midprev.next;
            fast=fast.next.next;
        }
        ListNode mid=midprev.next;
        midprev.next=null;
        return mid;
    }
}
public ListNode lastElement(ListNode head)
{
    ListNode tail=null;
    ListNode temp=head;
    while(temp!=null)
    {
        tail=temp;
        temp=temp.next;
    }
    return tail;
}
