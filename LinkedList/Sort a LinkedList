class Solution {
    public ListNode sortList(ListNode head) 
    {
        if(head == null || head.next == null)return head;
        ListNode middle=getMiddle(head);
        ListNode left=sortList(head);
        ListNode right=sortList(middle);
        return merge(left,right);     
        
    }
    ListNode merge(ListNode left,ListNode right)
    {
        ListNode temp=new ListNode();
        ListNode curr=temp;
        while(left!=null && right!=null)
        {
            if(left.val<right.val)
            {
                curr.next=left;
                curr=curr.next;
                left=left.next;
            }
            else
            {
                curr.next=right;
                curr=curr.next;
                right=right.next;   
            }
        }
        curr.next=(left!= null) ? left : right;
        return temp.next;
    }
    public ListNode getMiddle(ListNode h)
    {
        ListNode midprev=null;
        ListNode fast=h;
        while(fast!=null && fast.next!=null)
        {
            midprev=(midprev==null) ? h : midprev.next;
            fast=fast.next.next;
        }
        ListNode mid=midprev.next;
        midprev.next=null;
        return mid;
    }
}
